#!/usr/bin/php
<?php
/**
 * @version		    $Id: 
 * @package		    jUpgrade
 * @subpackage	  jUpgradeCli
 * @copyright			CopyRight 2011 Matware All rights reserved.
 * @author				Matias Aguirre
 * @email   			maguirre@matware.com.ar
 * @link					http://www.matware.com.ar/
 * @license				GNU/GPL http://www.gnu.org/licenses/gpl-2.0-standalone.html
 */
// We are a valid Joomla entry point.
define('_JEXEC', 1);

// Bootstrap the application.
require './bootstrap.php';

class jUpgradeCli extends JApplicationCli
{
	/**
	* A database object for the application to use.
	*
	* @var JDatabase
	* @since 11.3
	*/
	protected $jupgrade = null;

	/**
	* Class constructor.
	*
	* @return void
	*
	* @since 2.5.0
	*/
	public function __construct()
	{
		// Call the parent __construct method so it bootstraps the application class.
		parent::__construct();
	
		// Create the jUpgrade object
		$this->jupgrade = new jUpgrade;

		// Add the logger.
		JLog::addLogger(
			// Pass an array of configuration options
			array(
				// Set the name of the log file
				'text_file' => JPATH_SITE.'/logs/jupgrade.log.php'
			)
		);

		// Print a Picasso
		$this->out();
		$this->out('                                       /;    ;\              ');
		$this->out('         jUpgradeCLi v2.5.0        __  \\____//              ');
		$this->out('                                  /{_\_/   ` \____           ');
		$this->out('                                  \___   (o)  (o) }          ');
		$this->out('       _____________________________/          :--]          ');
		$this->out('   ,-,|`@@@@@@@@       @@@@@@         \_    `__\             ');
		$this->out('  ;:(  @@@@@@@@@        @@@             \___(o.o)            ');
		$this->out('  :: )  @@@@          @@@@@@        ,`@@(  `====`            ');
		$this->out('  :: : @@@@@:          @@@@         `@@@:     \              ');
		$this->out('  :: \  @@@@@:       @@@@@@@)    (  `@@@`      JLinux Rules! ');
		$this->out('  ;; /\      /`,    @@@@@@@@@\   :@@@@@)                     ');
		$this->out('  ::/  )    {_----------------:  :~`,~~;                     ');
		$this->out(' ;;``; :   )                  :  / `; ;                      ');
		$this->out(';;;; : :   ;                  :  ;  ; :                      ');
		$this->out('```` / :  :                   :  :  : :                      ');
		$this->out('    )_ \__;      ";"          :_ ;  \_\       `,','          ');
		$this->out('    :__\  \    * `,`*         \  \  :  \   *  8`;`*  *       ');
		$this->out('        `^`     \ :/           `^`  `-^-`   \ / :  \/        ');
		$this->out();
	}

	/**
	 * Help
	 *
	 * @return	none
	 * @since	2.5.0
	 */
  public function help()
	{
		// Print help
		$this->out();
		$this->out(' jUpgradeCli v2.5.0');
		$this->out(' Usage: jUpgradeCli --from your_database.sql --to your_migrate_database.sql [ --only=users|categories|content|modules|menus ] ');
		$this->out();
		$this->out(' Author: Matias Aguirre (maguirre@matware.com.ar)');
		$this->out(' License: GNU/GPL http://www.gnu.org/licenses/gpl-2.0-standalone.html');
		$this->out();
	}

	/**
	 * execute
	 *
	 * @return	none
	 * @since	2.5.0
	 */
  public function execute()
  {
		// Cleanup 
		$this->cleanup();

		// Import the user database if exists
		$from = $this->input->get('from');
		if (JFile::exists($from)) {
			// Import the sql file
		  if (JUpgradeCliHelper::populateDatabase($this->jupgrade->db_old, $from, $errors) > 0 ) {
		  	return false;
		  }
		}

		// Import Joomla 1.7/2.5 default schema
		$joomladump = JPATH_BASE.'/sql/joomla.sql';
		// Import the sql file
	  if (JUpgradeCliHelper::populateDatabase($this->jupgrade->db_new, $joomladump, $errors) > 0 ) {
	  	return false;
	  }

		// Start migration
		$this->migrate();

	} // end method

	/**
	 * migrate
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	public function migrate()
	{

		$finished = false;

		while (!$finished)
		{

			$step = $this->getStep();

			if ($step === false){
				$finished = true;
				break;
			}

			$this->out("[{$step->id}] Migrating {$step->name}");

			if ($step->id <= 10) {
				$this->processStep($step);
			}else if ($step->id > 10) {
				$this->processExtensionStep($step);
			}

			$this->updateStep($step);
		}



	} // end method

	/**
	 * processStep
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	public function processStep ($step)
	{

		switch ($step->name)
		{
			case 'users':
				// Migrate the users.
				$u1 = new jUpgradeUsers($step);
				$u1->upgrade();

				// Migrate the usergroups.
				$u2 = new jUpgradeUsergroups($step);
				$u2->upgrade();

				// Migrate the user-to-usergroup mapping.
				$u2 = new jUpgradeUsergroupMap($step);
				$u2->upgrade();

				break;
			case 'categories':
				// Migrate the Categories.
				$categories = new jUpgradeCategories($step);
				$categories->upgrade();

				break;
			case 'content':
				// Migrate the Content.
				$content = new jUpgradeContent($step);
				$content->upgrade();

				// Migrate the Frontpage Content.
				$frontpage = new jUpgradeContentFrontpage($step);
				$frontpage->upgrade();

				break;
			case 'menus':
				// Migrate the menu.
				$menu = new jUpgradeMenu;
				$menu->upgrade();

				// Migrate the menu types.
				$menutypes = new jUpgradeMenuTypes($step);
				$menutypes->upgrade();

				break;
			case 'modules':
				// Migrate the Modules.
				$modules = new jUpgradeModules($step);
				$modules->upgrade();

				// Migrate the Modules Menus.
				$modulesmenu = new jUpgradeModulesMenu($step);
				$modulesmenu->upgrade();

				break;
			case 'banners':
				// Migrate the categories of banners.
				$cat = new jUpgradeCategory($step);
				$cat->section = "com_banner";
				$cat->upgrade();

				// Migrate the banners.
				$banners = new jUpgradeBanners($step);
				$banners->upgrade();

				break;
			case 'contacts':
				// Migrate the categories of contacts.
				$cat = new jUpgradeCategory($step);
				$cat->section = "com_contact_details";
				$cat->upgrade();

				// Migrate the contacts.
				$contacts = new jUpgradeContacts($step);
				$contacts->upgrade();

				break;
			case 'newsfeeds':
				// Migrate the categories of newsfeeds.
				$cat = new jUpgradeCategory($step);
				$cat->section = "com_newsfeeds";
				$cat->upgrade();

				// Migrate the newsfeeds.
				$newsfeeds = new jUpgradeNewsfeeds;
				$newsfeeds->upgrade();

				break;
			case 'weblinks':
				// Migrate the categories of weblinks.
				$cat = new jUpgradeCategory($step);
				$cat->section = "com_weblinks";
				$cat->upgrade();

				// Migrate the weblinks.
				$weblinks = new jUpgradeWeblinks($step);
				$weblinks->upgrade();

				break;
			case 'extensions':
				// Get jUpgradeExtensions instance
				$extension = jUpgradeExtensions::getInstance($step);
				$success = $extension->upgrade();

				break;
		}

	} // end method

	/**
	 * processStep
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	public function processExtensionStep ($step)
	{
		// Get jUpgradeExtensions instance
		$extension = jUpgradeExtensions::getInstance($step);
		$success = $extension->upgradeExtension();

		if ($extension->isReady())
		{
			// updating the status flag
			$query = "UPDATE jupgrade_steps SET status = 1"
			." WHERE name = '{$step->name}'";
			$this->jupgrade->db_new->setQuery($query);
			$this->jupgrade->db_new->query();

			// Check for query error.
			$error = $this->jupgrade->db_new->getErrorMsg();
		}
	}

	/**
	 * Cleanup
	 *
	 * @return	none
	 * @since	2.5.0
	 */
	function cleanup()
	{	
		// Set all status to 0 and clear state
		$query = "UPDATE jupgrade_steps SET status = 0, state = ''";
		$this->jupgrade->db_new->setQuery($query);
		$this->jupgrade->db_new->query();

		// Cleanup 3rd extensions
		$query = "DELETE FROM jupgrade_steps WHERE id > 10";
		$this->jupgrade->db_new->setQuery($query);
		$this->jupgrade->db_new->query();
		
		// Get the prefix
		$prefix = $this->jupgrade->db_new->getPrefix();
		$prefix_old = $this->jupgrade->db_old->getPrefix();

    if ($this->jupgrade->canDrop) {

			// Drop tables 
			$this->dropTables($prefix);
			// Drop old tables
			$this->dropTables($prefix_old);

			$tables = array();
			$tables[] = 'jupgrade_categories';
			$tables[] = 'jupgrade_menus';
			$tables[] = 'jupgrade_modules';

			for ($i=0;$i<count($tables);$i++) {
				// Truncate mapping tables
				$query = "TRUNCATE TABLE `{$tables[$i]}`";
				$this->jupgrade->db_new->setQuery($query);
				$this->jupgrade->db_new->query();
			}

			// Check for query error.
			$error = $this->jupgrade->db_new->getErrorMsg();

			if ($error) {
				throw new Exception($error);
			}

		} else {

			$query = "SHOW TABLES LIKE '{$prefix}%'";
			$this->jupgrade->db_new->setQuery($query);
			$tables = $this->jupgrade->db_new->loadRowList();

			$tables[][0] = 'jupgrade_categories';
			$tables[][0] = 'jupgrade_menus';
			$tables[][0] = 'jupgrade_modules';

			for ($i=0;$i<count($tables);$i++) {
				// Truncate mapping tables
				$query = "DELETE FROM `{$tables[$i][0]}`";
				$this->jupgrade->db_new->setQuery($query);
				$this->jupgrade->db_new->query();

				// Check for query error.
				$error = $this->jupgrade->db_new->getErrorMsg();

				if ($error) {
					throw new Exception($error);
				}
			}

		} // end if
	} // end method

	public function dropTables($prefix) {

		$query = "SHOW TABLES LIKE '{$prefix}%'";
		$this->jupgrade->db_new->setQuery($query);
		$tables = $this->jupgrade->db_new->loadRowList();

		for($i=0;$i<count($tables);$i++) {
			$table = $tables[$i][0];
			$query = "DROP TABLE {$table}";
			$this->jupgrade->db_new->setQuery($query);
			$this->jupgrade->db_new->query();

			// Check for query error.
			$error = $this->jupgrade->db_new->getErrorMsg();

			if ($error) {
				throw new Exception($error);
			}
		}
	}

	public function getStep() {
		// Select the steps
		$query = "SELECT * FROM jupgrade_steps AS s WHERE s.status != 1 ORDER BY s.id ASC LIMIT 1";
		$this->jupgrade->db_new->setQuery($query);
		$step = $this->jupgrade->db_new->loadObject();

		// Check for query error.
		$error = $this->jupgrade->db_new->getErrorMsg();

		if ($error) {
			throw new Exception($error);
		}
	
		// Check if steps is an object
		if (is_object($step)) {
		  return $step;
		}else{
			return false;
		}
	}

	public function updateStep($step) {
		// updating the status flag
		$query = "UPDATE jupgrade_steps SET status = 1"
		." WHERE name = '{$step->name}'";
		$this->jupgrade->db_new->setQuery($query);
		$this->jupgrade->db_new->query();

		// Check for query error.
		$error = $this->jupgrade->db_new->getErrorMsg();

		if ($error) {
			throw new Exception($error);
		}

		return true;
	}

} // end class

// Wrap the execution in a try statement to catch any exceptions thrown anywhere in the script.
try
{
	// Instantiate the application object, passing the class name to JCli::getInstance
	// and use chaining to execute the application.
	JCli::getInstance('jUpgradeCli')->execute();
}
catch (Exception $e)
{
	// An exception has been caught, just echo the message.
	fwrite(STDOUT, $e->getMessage() . "\n");
	exit($e->getCode());
}
